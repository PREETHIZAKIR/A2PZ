import streamlit as st
from datetime import datetime
from fpdf import FPDF
import google.generativeai as genai

# --- Configure Gemini API ---
genai.configure(api_key="AIzaSyDK5hw1kVgVBgJJc64SHH7T9pJOWM2U2lk")  # Replace with your Gemini API Key
model = genai.GenerativeModel('gemini-2.0-flash')

# --- Page Title ---
st.title("üìö SAT Study Plan Generator")
st.write("Create a personalized SAT study plan based on your goals and preferences.")

# --- Inputs ---
test_date = st.text_input("Enter your SAT test date (YYYY-MM-DD):")
target_score = st.number_input("Enter your target SAT score (out of 1600):", min_value=400, max_value=1600, step=10)

st.write("### Select Focus Areas")
math_focus = st.slider("Math Focus (%)", 0, 100, 33)
reading_focus = st.slider("Reading Focus (%)", 0, 100, 33)
writing_focus = st.slider("Writing Focus (%)", 0, 100, 34)

if math_focus + reading_focus + writing_focus != 100:
    st.warning("The total of focus areas should be 100%. Please adjust.")

tone = st.radio("Select the tone of your study plan:", ["Intensive", "Balanced", "Light"])

# --- Session State ---
if "study_plan" not in st.session_state:
    st.session_state.study_plan = ""

# --- Generate Plan ---
def generate_plan():
    prompt = (
        f"Create a detailed SAT preparation study plan for a student. "
        f"The test date is {test_date} and the target score is {target_score}. "
        f"Focus areas: Math {math_focus}%, Reading {reading_focus}%, Writing {writing_focus}%. "
        f"The plan should be in a {tone.lower()} tone. "
        f"Include weekly goals, tips, and time allocations."
    )
    response = model.generate_content(prompt)
    return response.text

# --- Buttons ---
if st.button("Generate Study Plan"):
    if not test_date or not target_score:
        st.error("Please enter both the test date and target score.")
    elif math_focus + reading_focus + writing_focus != 100:
        st.error("Focus areas must total 100%.")
    else:
        st.session_state.study_plan = generate_plan()
        st.success("‚úÖ Study Plan Generated!")

# --- Regenerate ---
if st.button("Regenerate Plan"):
    if test_date and target_score:
        st.session_state.study_plan = generate_plan()
        st.info("üîÅ Regenerated the study plan.")
    else:
        st.error("Enter test date and score before regenerating.")

# --- Display Plan ---
if st.session_state.study_plan:
    st.text_area("Your SAT Study Plan:", value=st.session_state.study_plan, height=400)

    # --- Download as PDF ---
    def save_plan_to_pdf(text):
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        for line in text.split("\n"):
            pdf.multi_cell(0, 10, line)
        filename = "SAT_Study_Plan.pdf"
        pdf.output(filename)
        return filename

    if st.button("Download Plan as PDF"):
        pdf_path = save_plan_to_pdf(st.session_state.study_plan)
        with open(pdf_path, "rb") as file:
            st.download_button(
                label="üì• Download PDF",
                data=file,
                file_name="SAT_Study_Plan.pdf",
                mime="application/pdf")
